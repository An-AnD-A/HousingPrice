{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.11.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":5407,"databundleVersionId":868283,"sourceType":"competition"}],"dockerImageVersionId":31089,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"import pandas as pd\nimport logging\n\n\ndef read_csv(file_path):\n    \"\"\"\n    Reads a CSV file and returns a pandas DataFrame.\n    \n    :param file_path: str, path to the CSV file\n    :return: pd.DataFrame, DataFrame containing the data from the CSV file\n    \"\"\"\n    try:\n        df = pd.read_csv(file_path)\n        return df\n    except Exception as e:\n        print(f\"Error reading the CSV file: {e}\")\n        return None\n    \n\ndef read_excel(file_path, sheet_name=0):\n    \"\"\"\n    Reads an Excel file and returns a pandas DataFrame.\n    \n    :param file_path: str, path to the Excel file\n    :param sheet_name: str or int, name or index of the sheet to read\n    :return: pd.DataFrame, DataFrame containing the data from the specified sheet\n    \"\"\"\n    try:\n        df = pd.read_excel(file_path, sheet_name=sheet_name)\n        return df\n    except Exception as e:\n        print(f\"Error reading the Excel file: {e}\")\n        return None\n    \n\ndef read(file_path, **kwargs):\n    \"\"\"\n    Reads data from a file and returns a pandas DataFrame.\n    \n    :param file_path: str, path to the file (CSV or Excel)\n    :param kwargs: additional arguments for reading the file\n    :return: pd.DataFrame, DataFrame containing the data from the file\n    \"\"\"\n    try:\n        logging.info(f\"Reading file as csv\")\n        df = read_csv(file_path)\n        return df\n    except Exception as e:\n        logging.error(f\"Failed to read file as csv: {e}\")\n        try:\n            logging.info(f\"Reading file as excel\")\n            df = read_excel(file_path, **kwargs)\n            return df\n        except Exception as e:\n            logging.error(f\"Failed to read file as excel: {e}\")\n            return None\n        \nif __name__ == \"__main__\":\n    # Example usage\n    file_path = \"/kaggle/input/house-prices-advanced-regression-techniques/train.csv\"  # Replace with your file path\n    df = read(file_path)\n    if df is not None:\n        print(df.head())\n    else:\n        print(\"Failed to read the file.\")","metadata":{"_uuid":"4a252210-9bcf-4bc9-a4d6-5d477ca1a732","_cell_guid":"8efd9148-f592-498b-b1aa-f785695070e8","trusted":true,"collapsed":false,"jupyter":{"outputs_hidden":false},"execution":{"iopub.status.busy":"2025-08-07T14:48:04.506499Z","iopub.execute_input":"2025-08-07T14:48:04.507573Z","iopub.status.idle":"2025-08-07T14:48:04.577587Z","shell.execute_reply.started":"2025-08-07T14:48:04.507543Z","shell.execute_reply":"2025-08-07T14:48:04.576672Z"}},"outputs":[{"name":"stdout","text":"   Id  MSSubClass MSZoning  LotFrontage  LotArea Street Alley LotShape  \\\n0   1          60       RL         65.0     8450   Pave   NaN      Reg   \n1   2          20       RL         80.0     9600   Pave   NaN      Reg   \n2   3          60       RL         68.0    11250   Pave   NaN      IR1   \n3   4          70       RL         60.0     9550   Pave   NaN      IR1   \n4   5          60       RL         84.0    14260   Pave   NaN      IR1   \n\n  LandContour Utilities  ... PoolArea PoolQC Fence MiscFeature MiscVal MoSold  \\\n0         Lvl    AllPub  ...        0    NaN   NaN         NaN       0      2   \n1         Lvl    AllPub  ...        0    NaN   NaN         NaN       0      5   \n2         Lvl    AllPub  ...        0    NaN   NaN         NaN       0      9   \n3         Lvl    AllPub  ...        0    NaN   NaN         NaN       0      2   \n4         Lvl    AllPub  ...        0    NaN   NaN         NaN       0     12   \n\n  YrSold  SaleType  SaleCondition  SalePrice  \n0   2008        WD         Normal     208500  \n1   2007        WD         Normal     181500  \n2   2008        WD         Normal     223500  \n3   2006        WD        Abnorml     140000  \n4   2008        WD         Normal     250000  \n\n[5 rows x 81 columns]\n","output_type":"stream"}],"execution_count":3},{"cell_type":"code","source":"","metadata":{"trusted":true},"outputs":[],"execution_count":null}]}